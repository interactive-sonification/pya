:py:mod:`pya.backend`
=====================

.. py:module:: pya.backend


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   Dummy/index.rst
   Jupyter/index.rst
   PyAudio/index.rst
   base/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pya.backend.DummyBackend



Functions
~~~~~~~~~

.. autoapisummary::

   pya.backend.determine_backend



Attributes
~~~~~~~~~~

.. autoapisummary::

   pya.backend._LOGGER


.. py:class:: DummyBackend


   Bases: :py:obj:`pya.backend.base.BackendBase`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: dtype
      :value: 'float32'

      

   .. py:attribute:: range
      :value: 1

      

   .. py:attribute:: bs
      :value: 256

      

   .. py:method:: get_device_count()


   .. py:method:: get_device_info_by_index(idx)


   .. py:method:: get_default_input_device_info()


   .. py:method:: get_default_output_device_info()


   .. py:method:: open(*args, input_flag, output_flag, rate, frames_per_buffer, channels, stream_callback=None, **kwargs)


   .. py:method:: process_buffer(buffer)


   .. py:method:: terminate()



.. py:data:: _LOGGER

   

.. py:function:: determine_backend(force_webaudio=False, port=8765, **kwargs) -> pya.backend.base.BackendBase

   Determine a suitable Backend implementation

   This will first try a local pyaudio Backend unless force_webaudio is set.

   :param force_webaudio: prefer JupyterBackend, by default False
   :type force_webaudio: bool, optional
   :param port: port for the JupyterBackend, by default 8765
   :type port: int, optional

   :returns: Backend instance
   :rtype: PyAudioBackend or JupyterBackend

   :raises RuntimeError: if no Backend is available



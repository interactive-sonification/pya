:py:mod:`pya.backend.Jupyter`
=============================

.. py:module:: pya.backend.Jupyter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pya.backend.Jupyter.JupyterBackend
   pya.backend.Jupyter.JupyterStream




.. py:class:: JupyterBackend(port=8765, proxy_suffix=None)


   Bases: :py:obj:`pya.backend.base.BackendBase`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: dtype
      :value: 'float32'

      

   .. py:attribute:: range
      :value: 1

      

   .. py:attribute:: bs
      :value: 4096

      

   .. py:method:: get_device_count()


   .. py:method:: get_device_info_by_index(idx)


   .. py:method:: get_default_input_device_info()


   .. py:method:: get_default_output_device_info()


   .. py:method:: open(*args, channels, rate, stream_callback=None, **kwargs)


   .. py:method:: process_buffer(buffer)


   .. py:method:: terminate()



.. py:class:: JupyterStream(channels, rate, stream_callback, port, proxy_suffix)


   Bases: :py:obj:`pya.backend.base.StreamBase`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: set_buffer_threshold(buffer_limit)
      :staticmethod:


   .. py:method:: stop_stream()


   .. py:method:: close()


   .. py:method:: start_stream()


   .. py:method:: is_active()




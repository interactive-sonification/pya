:py:mod:`pya.helper`
====================

.. py:module:: pya.helper


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   backend/index.rst
   codec/index.rst
   helpers/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   pya.helper.ampdb
   pya.helper.dbamp
   pya.helper.cpsmidi
   pya.helper.midicps
   pya.helper.linlin
   pya.helper.clip
   pya.helper.buf_to_float
   pya.helper.spectrum
   pya.helper.audio_from_file
   pya.helper.normalize
   pya.helper.device_info
   pya.helper.find_device



.. py:function:: ampdb(amp)

   Convert amplitude to db


.. py:function:: dbamp(db)

   Convert db to amplitude


.. py:function:: cpsmidi(c)

   Convert cycle per second into midi number


.. py:function:: midicps(m)

   Convert midi number into cycle per second


.. py:function:: linlin(x, smi, sma, dmi, dma)

   Linear mapping

   :param x: input value
   :type x: float
   :param smi: input range's minimum
   :type smi: float
   :param sma: input range's maximum
   :type sma: float
   :param dmi: input range's minimum
   :type dmi: float
   :param dma:

   :returns: **_** -- mapped output
   :rtype: float


.. py:function:: clip(value, minimum=-float('inf'), maximum=float('inf'))

   Signal hard clipping


.. py:function:: buf_to_float(x, n_bytes=2, dtype=np.float32)

   Convert an integer buffer to floating point values.
   This is primarily useful when loading integer-valued wav data
   into numpy arrays.
   .. seealso:: :obj:`buf_to_float`

   :param x: The integer-valued data buffer
   :type x: np.ndarray [dtype=int]
   :param n_bytes: The number of bytes per sample in `x`
   :type n_bytes: int [1, 2, 4]
   :param dtype: The target output type (default: 32-bit float)
   :type dtype: numeric type

   :returns: **x_float** -- The input data buffer cast to floating point
   :rtype: np.ndarray [dtype=float]


.. py:function:: spectrum(sig, samples, channels, sr)

   Return spectrum of a given signal. This method return spectrum matrix if input signal is multi-channels.

   :param sig: signal array
   :type sig: numpy.ndarray
   :param samples: total amount of samples
   :type samples: int
   :param channels: signal channels
   :type channels: int
   :param sr: sampling rate
   :type sr: int

   :returns: * **frq** (*numpy.ndarray*) -- frequencies
             * **Y** (*numpy.ndarray*) -- FFT of the signal.


.. py:function:: audio_from_file(path, dtype=np.float32)

   Load an audio buffer using audioread.
   This loads one block at a time, and then concatenates the results.


.. py:function:: normalize(d)

   Return the normalized input array


.. py:function:: device_info()

   Return a formatted string about available audio devices and their info


.. py:function:: find_device(min_input=0, min_output=0)



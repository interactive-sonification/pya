:py:mod:`pya.aserver`
=====================

.. py:module:: pya.aserver


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pya.aserver.Aserver




Attributes
~~~~~~~~~~

.. autoapisummary::

   pya.aserver._LOGGER


.. py:data:: _LOGGER

   

.. py:class:: Aserver(sr: int = 44100, bs: Optional[int] = None, device: Optional[int] = None, channels: Optional[int] = None, backend=None, **kwargs)


   Pya audio server
   Based on pyaudio, works as a FIFO style audio stream pipeline,
   allowing Asig.play() to send audio segement into the stream.

   Examples:
   -----------
   >>> from pya import *
   >>> ser = Aserver()
   >>> ser.boot()
   AServer: sr: 44100, blocksize: ...,
            Stream Active: True, Device: ...
   >>> asine = Ugen().sine()
   >>> asine.play(server=ser)
   Asig('sine'): 1 x 44100 @ 44100Hz = 1.000s cn=['0']

   .. py:property:: channels


   .. py:property:: device_dict


   .. py:property:: max_out_chn
      :type: int


   .. py:property:: max_in_chn
      :type: int


   .. py:property:: is_active
      :type: bool


   .. py:property:: device


   .. py:attribute:: default

      

   .. py:method:: startup_default_server(**kwargs)
      :staticmethod:


   .. py:method:: shutdown_default_server()
      :staticmethod:


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: get_devices(verbose: bool = False)

      Return (and optionally print) available input and output device


   .. py:method:: set_device(idx: int, reboot: bool = True)

      Set audio device, an alternative way is to direct set the device property, i.e. Aserver.device = 1,
      but that will not reboot the server.

      :param idx: Index of the device
      :type idx: int
      :param reboot: If true the server will reboot. (Default value = True)
      :type reboot: bool


   .. py:method:: boot()

      boot Aserver = start stream, setting its callback to this callback.


   .. py:method:: quit()

      Aserver quit server: stop stream and terminate pa


   .. py:method:: play(asig, onset: Union[int, float] = 0, out: int = 0, **kwargs)

      Dispatch asigs or arrays for given onset.

      asig: pya.Asig
          An Asig object
      onset: int or float
          Time when the sound should play, 0 means asap
      out: int
          Output channel


   .. py:method:: _play_callback(in_data, frame_count, time_info, flag)

      callback function, called from pastream thread when data needed.


   .. py:method:: stop()


   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_value, traceback)


   .. py:method:: __del__()




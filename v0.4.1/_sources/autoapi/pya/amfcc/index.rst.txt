:py:mod:`pya.amfcc`
===================

.. py:module:: pya.amfcc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pya.amfcc.Amfcc




Attributes
~~~~~~~~~~

.. autoapisummary::

   pya.amfcc._LOGGER


.. py:data:: _LOGGER
   

   

.. py:class:: Amfcc(x, sr=None, label='', n_per_frame=None, hopsize=None, nfft=None, window='hann', nfilters=26, ncep=13, ceplifter=22, preemph=0.95, append_energy=True, cn=None)

   Mel filtered Fourier spectrum (MFCC) class,
   this class is inspired by jameslyons/python_speech_features,
   https://github.com/jameslyons/python_speech_features
   Steps of mfcc:
       * Frame the signal into short frames.
       * For each frame calculate the periodogram estimate of the
       power spectrum.
       * Apply the mel filterbank to the power spectra, sum the energy
       in each filter.
       * Take the DCT of the log filterbank energies.
       * Keep DCT coefficients 2-13, discard the rest.
       * Take the logarithm of all filterbank energies.

   .. attribute:: x

      x can be two forms, the most commonly used is an Asig object.
      Such as directly acquired from an Asig object via Asig.to_stft().

      :type: Asig or numpy.ndarray

   .. attribute:: sr

      sampling rate, this is only necessary if x is not Asig.

      :type: int

   .. attribute:: duration

      Duration of the signal in second,

      :type: float

   .. attribute:: label

      A string label as an identifier.

      :type: str

   .. attribute:: n_per_frame

      Number of samples per frame

      :type: int

   .. attribute:: hopsize

      Number of samples of each successive frame.

      :type: int

   .. attribute:: nfft

      FFT size, default to be next power of 2 integer of n_per_frame

      :type: int

   .. attribute:: window

      Type of the window function (Default value='hann'),
      use scipy.signal.get_window to return a numpy array.
      If None, no windowing will be applied.

      :type: str

   .. attribute:: nfilters

      The number of mel filters. Default is 26

      :type: int

   .. attribute:: ncep

      Number of cepstrum. Default is 13

      :type: int

   .. attribute:: cepliter

      Lifter's cepstral coefficient. Default is 22

      :type: int

   .. attribute:: frames

      The original signal being reshape into frame based on
      n_per_frame and hopsize.

      :type: numpy.ndarray

   .. attribute:: frame_energy

      Total power spectrum energy of each frame.

      :type: numpy.ndarray

   .. attribute:: filter_banks

      An array of mel filters

      :type: numpy.ndarray

   .. attribute:: cepstra

      An array of the MFCC coeffcient, size: nframes x ncep

      :type: numpy.ndarray

   .. py:property:: nframes


   .. py:property:: timestamp


   .. py:property:: features

      The features refer to the cepstra

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: preemphasis(x, coeff=0.97)
      :staticmethod:

      Pre-emphasis filter to whiten the spectrum.
      Pre-emphasis is a way of compensating for the
      rapid decaying spectrum of speech.
      Can often skip this step in the cases of music for example

      :param x: Signal array
      :type x: numpy.ndarray
      :param coeff: Preemphasis coefficient. The larger the stronger smoothing
                    and the slower response to change.
      :type coeff: float

      :returns: **_** -- The whitened signal.
      :rtype: numpy.ndarray


   .. py:method:: mel_filterbanks(sr, nfilters=26, nfft=512, lowfreq=0, highfreq=None)
      :staticmethod:

      Compute a Mel-filterbank. The filters are stored in the rows,
      the columns correspond to fft bins. The filters are returned as
      an array of size nfilt * (nfft/2 + 1)

      :param sr: Sampling rate
      :type sr: int
      :param nfilters: The number of filters, default 20
      :type nfilters: int
      :param nfft: The size of FFT, default 512
      :type nfft: int
      :param lowfreq: The lowest band edge of the mel filters, default 0 Hz
      :type lowfreq: int or float
      :param highfreq: The highest band edge of the mel filters, default sr // 2
      :type highfreq: int or float

      :returns: **_** -- A numpy array of size nfilt * (nfft/2 + 1)
                containing filterbank. Each row holds 1 filter.
      :rtype: numpy.ndarray


   .. py:method:: lifter(cepstra, L=22)
      :staticmethod:

      Apply a cepstral lifter the the matrix of cepstra.
      This has the effect of increasing the magnitude of
      the high frequency DCT coeffs.

      Liftering operation is similar to filtering operation in the
      frequency domain
      where a desired quefrency region for analysis is selected
      by multiplying the whole cepstrum
      by a rectangular window at the desired position.
      There are two types of liftering performed,
      low-time liftering and high-time liftering.
      Low-time liftering operation is performed to extract
      the vocal tract characteristics in the quefrency domain
      and high-time liftering is performed to get the excitation
      characteristics of the analysis speech frame.


      :param cepstra: The matrix of mel-cepstra
      :type cepstra: numpy.ndarray
      :param L: The liftering coefficient to use. Default is 22,
                since cepstra usually has 13 elements, 22
                L will result almost half pi of sine lift.
                It essential try to emphasis to lower ceptral coefficient
                while deemphasize higher ceptral coefficient as they are
                less discriminative for speech contents.
      :type L: int


   .. py:method:: plot(cmap='inferno', show_bar=True, offset=0, scale=1.0, xlim=None, ylim=None, x_as_time=True, nxlabel=8, ax=None, **kwargs)

      Plot Amfcc.features via matshow, x is frames/time, y is the MFCCs

      :param figsize: Figure size, width, height in inches, Default = [6.4, 4.8]
      :type figsize: (float, float), optional, default: None
      :param cmap: colormap for matplotlib. Default is 'inferno'.
      :type cmap: str
      :param show_bar: Default is True, show colorbar.
      :type show_bar: bool, optional
      :param x_as_time: Default is True, show x axis as time or sample index.
      :type x_as_time: bool, optional
      :param nxlabel: The amountt of labels on the x axis. Default is 8 .
      :type nxlabel: int, optional



